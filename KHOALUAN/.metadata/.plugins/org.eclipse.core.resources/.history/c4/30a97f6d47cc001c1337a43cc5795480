package cntt.trang.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Date;

import cntt.trang.bean.QuangBa;
import cntt.trang.bean.TimKiemSV;
import cntt.trang.bean.TuyenDung;

public class TuyenDungDAO {
	static Connection conn =null;
	static PreparedStatement ps = null;
	static ResultSet rs= null;
	
	public ArrayList<TuyenDung> getAllTuyenDungByMaDoanhNghiep(long maDoanhNghiep) throws SQLException {
		ArrayList<TuyenDung> ds=new ArrayList<TuyenDung>();
		String query = "select * from TuyenDung where MaDoanhNghiep=? order by ThoiGianDangBai desc";
		try {
			conn = new DBConnect().getConnection();
			ps = conn.prepareStatement(query);
			ps.setLong(1, maDoanhNghiep);
			rs= ps.executeQuery();	
			while(rs.next()) {
				long maTuyenDung = rs.getLong("MaTuyenDung");
				long maNganhNghe = rs.getLong("MaNganhNghe"); 
				long maHinhThuc = rs.getLong("MaHinhThuc");
				int sinhVienNam = rs.getInt("SinhVienNam");
				String khuVucTuyenDung = rs.getNString("KhuVucTuyenDung");
				String mucLuong = rs.getNString("MucLuong"); 
				String tenCongViec = rs.getNString("TenCongViec");
				String thoiGianThuViec = rs.getNString("ThoiGianThuViec");
				String gioiTinh = rs.getNString("GioiTinh");
				int soLuong = rs.getInt("SoLuong");
				Date hanDangKy = rs.getDate("HanDangKy");
				String tieuDe = rs.getNString("TieuDe");
				String moTaCongViec = rs.getNString("MoTaCongViec");
				String yeuCauCongViec = rs.getNString("YeuCauCongViec");
				String quyenLoi = rs.getNString("QuyenLoi");
				boolean daDuyet = rs.getBoolean("DaDuyet");
				Date thoiGianDangBai=rs.getDate("ThoiGianDangBai");
				ds.add(new TuyenDung(maTuyenDung, maNganhNghe, maHinhThuc, sinhVienNam, khuVucTuyenDung, mucLuong, tenCongViec, thoiGianThuViec, gioiTinh, soLuong, hanDangKy, tieuDe, moTaCongViec, yeuCauCongViec, quyenLoi, daDuyet, maDoanhNghiep, thoiGianDangBai));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			if(rs!=null) {
				rs.close();
			}
			if(ps!=null) {
				ps.close();
			}
			if(conn!=null) {
				conn.close();
			}	
		}
		return ds;
	}
	public ArrayList<TuyenDung> getAllTuyenDungDaDuyet() throws SQLException {
		ArrayList<TuyenDung> ds=new ArrayList<TuyenDung>();
		String query = "select * from TuyenDung where DaDuyet=?  order by ThoiGianDangBai desc";
		try {
			conn = new DBConnect().getConnection();
			ps = conn.prepareStatement(query);
			ps.setBoolean(1, true);
			rs= ps.executeQuery();	
			while(rs.next()) {
				long maTuyenDung = rs.getLong("MaTuyenDung");
				long maNganhNghe = rs.getLong("MaNganhNghe"); 
				long maHinhThuc = rs.getLong("MaHinhThuc");
				int sinhVienNam = rs.getInt("SinhVienNam");
				String khuVucTuyenDung = rs.getString("KhuVucTuyenDung");
				String mucLuong = rs.getNString("MucLuong"); 
				String tenCongViec = rs.getNString("TenCongViec");
				String thoiGianThuViec = rs.getNString("ThoiGianThuViec");
				String gioiTinh = rs.getNString("GioiTinh");
				int soLuong = rs.getInt("SoLuong");
				Date hanDangKy = rs.getDate("HanDangKy");
				String tieuDe = rs.getNString("TieuDe");
				String moTaCongViec = rs.getNString("MoTaCongViec");
				String yeuCauCongViec = rs.getNString("YeuCauCongViec");
				String quyenLoi = rs.getNString("QuyenLoi");
				boolean daDuyet = rs.getBoolean("DaDuyet");
				Date thoiGianDangBai=rs.getDate("ThoiGianDangBai");
				long maDoanhNghiep=rs.getLong("MaDoanhNghiep");
				ds.add(new TuyenDung(maTuyenDung, maNganhNghe, maHinhThuc, sinhVienNam, khuVucTuyenDung, mucLuong, tenCongViec, thoiGianThuViec, gioiTinh, soLuong, hanDangKy, tieuDe, moTaCongViec, yeuCauCongViec, quyenLoi, daDuyet, maDoanhNghiep, thoiGianDangBai));
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		finally {
			if(rs!=null) {
				rs.close();
			}
			if(ps!=null) {
				ps.close();
			}
			if(conn!=null) {
				conn.close();
			}	
		}
		return ds;
	}
	public TuyenDung getTuyenDungByID(long maTuyenDung) throws SQLException {
			
			String query = "select * from TuyenDung where MaTuyenDung=?";
			try {
				conn = new DBConnect().getConnection();
				ps = conn.prepareStatement(query);
				ps.setLong(1, maTuyenDung);
				rs= ps.executeQuery();	
				if(rs.next()) {
					long maNganhNghe = rs.getLong("MaNganhNghe"); 
					long maHinhThuc = rs.getLong("MaHinhThuc");
					int sinhVienNam = rs.getInt("SinhVienNam");
					String khuVucTuyenDung = rs.getNString("KhuVucTuyenDung");
					String mucLuong = rs.getNString("MucLuong"); 
					String tenCongViec = rs.getNString("TenCongViec");
					String thoiGianThuViec = rs.getNString("ThoiGianThuViec");
					String gioiTinh = rs.getNString("GioiTinh");
					int soLuong = rs.getInt("SoLuong");
					Date hanDangKy = rs.getDate("HanDangKy");
					String tieuDe = rs.getNString("TieuDe");
					String moTaCongViec = rs.getNString("MoTaCongViec");
					String yeuCauCongViec = rs.getNString("YeuCauCongViec");
					String quyenLoi = rs.getNString("QuyenLoi");
					boolean daDuyet = rs.getBoolean("DaDuyet");
					long maDoanhNghiep = rs.getLong("MaDoanhNghiep");	
					Date thoiGianDangBai=rs.getDate("ThoiGianDangBai");
					return new TuyenDung(maTuyenDung, maNganhNghe, maHinhThuc, sinhVienNam, khuVucTuyenDung, mucLuong, tenCongViec, thoiGianThuViec, gioiTinh, soLuong, hanDangKy, tieuDe, moTaCongViec, yeuCauCongViec, quyenLoi, daDuyet, maDoanhNghiep, thoiGianDangBai);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			finally {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}	
			}
			return null;
		}
		public int insertTuyenDung(long maNganhNghe, long maHinhThuc, int sinhVienNam, String khuVucTuyenDung,
				String mucLuong, String tenCongViec, String thoiGianThuViec, String gioiTinh, int soLuong, Date hanDangKy,
				String tieuDe, String moTaCongViec, String yeuCauCongViec, String quyenLoi, boolean daDuyet,
				long maDoanhNghiep) throws SQLException {
			String query = "insert into TuyenDung(MaNganhNghe, MaHinhThuc,KhuVucTuyenDung,MucLuong, TenCongViec,SoLuong, HanDangKy,TieuDe, MoTaCongViec, YeuCauCongViec, QuyenLoi, DaDuyet,MaDoanhNghiep, ThoiGianDangBai ,SinhVienNam,ThoiGianThuViec,GioiTinh) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
			int flag=-1;
			try {
				conn = new DBConnect().getConnection();
				ps = conn.prepareStatement(query);
				ps.setLong(1, maNganhNghe);
				ps.setLong(2, maHinhThuc);
				ps.setNString(3, khuVucTuyenDung);
				ps.setNString(4, mucLuong);
				ps.setNString(5, tenCongViec);		
				ps.setInt(6, soLuong);
				ps.setDate(7, new java.sql.Date(hanDangKy.getTime()) );
				ps.setNString(8, tieuDe);
				ps.setNString(9, moTaCongViec);
				ps.setNString(10, yeuCauCongViec);
				ps.setNString(11, quyenLoi);
				ps.setBoolean(12, daDuyet);
				ps.setLong(13, maDoanhNghiep);
				ps.setDate(14, new java.sql.Date(new Date().getTime()));
				if(sinhVienNam!=0) ps.setInt(15, sinhVienNam);
				else ps.setNull(15, Types.INTEGER);
				if(thoiGianThuViec!=null) ps.setNString(16, thoiGianThuViec);
				else ps.setNull(16, Types.NVARCHAR);
				if(gioiTinh!=null) ps.setNString(17, gioiTinh);
				else ps.setNull(17, Types.NVARCHAR);
				flag= ps.executeUpdate();	
			} catch (Exception e) {
				e.printStackTrace();
			}
			finally {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}	
			}
			return flag;
		}
		
		public int deleteTuyenDung(long maTuyenDung) throws SQLException {
			String query = "delete from TuyenDung where MaTuyenDung=?";
			int flag=-1;
			try {
				conn = new DBConnect().getConnection();
				ps = conn.prepareStatement(query);
				ps.setLong(1, maTuyenDung);
				flag= ps.executeUpdate();	
			} catch (Exception e) {
				e.printStackTrace();
			}
			finally {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}	
			}
			return flag;
		}
		public int updateTuyenDung(long maTuyenDung, long maNganhNghe, long maHinhThuc, int sinhVienNam, String khuVucTuyenDung,
				String mucLuong, String tenCongViec, String thoiGianThuViec, String gioiTinh, int soLuong, Date hanDangKy,
				String tieuDe, String moTaCongViec, String yeuCauCongViec, String quyenLoi) throws SQLException {
			String query = "update TuyenDung set MaNganhNghe=?, MaHinhThuc=?, SinhVienNam=?,KhuVucTuyenDung=?,MucLuong=?, TenCongViec=?, ThoiGianThuViec=?, GioiTinh=?, SoLuong=?, HanDangKy=?,TieuDe=?, MoTaCongViec=?, YeuCauCongViec=?, QuyenLoi=? where MaTuyenDung=?";
			int flag=-1;
			try {
				conn = new DBConnect().getConnection();
				ps = conn.prepareStatement(query);
				ps.setLong(1, maNganhNghe);
				ps.setLong(2, maHinhThuc);
				if(sinhVienNam!=0) ps.setInt(3, sinhVienNam);
				else ps.setNull(3, Types.INTEGER);
				ps.setNString(4, khuVucTuyenDung);
				ps.setNString(5, mucLuong);
				ps.setNString(6, tenCongViec);
				if(thoiGianThuViec!=null) ps.setNString(7, thoiGianThuViec);
				else ps.setNull(7, Types.NVARCHAR);
				if(gioiTinh!=null) ps.setNString(8, gioiTinh);
				else ps.setNull(8, Types.NVARCHAR);
				ps.setInt(9, soLuong);
				ps.setDate(10, new java.sql.Date(hanDangKy.getTime()) );
				ps.setNString(11, tieuDe);
				ps.setNString(12, moTaCongViec);
				ps.setNString(13, yeuCauCongViec);
				ps.setNString(14, quyenLoi);
				ps.setLong(15, maTuyenDung);
				
				
				flag= ps.executeUpdate();	
			} catch (Exception e) {
				e.printStackTrace();
			}
			finally {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}	
			}
			return flag;
		}
		public ArrayList<TuyenDung> timKiemTuyenDung(String key, int nam, String maNganhDaoTao, int loaiGPA) throws SQLException {
			String query= "select distinct TenNganh,MaSinhVien,HoVaTen,GPA\r\n" + 
					"from(\r\n" + 
					"	select  MaNganh ,TenNganh,MaSinhVien,TenKyNang,(case \r\n" + 
					"				when Nam is null then 0\r\n" + 
					"				else Nam\r\n" + 
					"				end) as Nam,HoVaTen,(case \r\n" + 
					"					when GPA <2 then 1\r\n" + 
					"					when GPA between 2 and 3 then 2\r\n" + 
					"					when GPA >=3 then 3\r\n" + 
					"					end) as LoaiGPA, GPA\r\n" + 
					"	from(\r\n" + 
					"		select MaNganh ,TenNganh,TenKyNang,HoVaTen,sv.MaSinhVien,(case \r\n" + 
					"										when sum(kq.SoTinChi) between 0 and 29 then 1\r\n" + 
					"										when sum(kq.SoTinChi) between 30 and 59 then 2\r\n" + 
					"										when sum(kq.SoTinChi) between 60 and 89 then 3\r\n" + 
					"										when (sum(kq.SoTinChi) between 90 and 119) and ndt.NamDaoTao=5 then 4\r\n" + 
					"										when (sum(kq.SoTinChi) >=90) and ndt.NamDaoTao=4 then 4\r\n" + 
					"										when (sum(kq.SoTinChi) >=120) and ndt.NamDaoTao=5 then 5\r\n" + 
					"			end) as Nam,  (CASE  \r\n" + 
					"							WHEN round(Sum(kq.SoTinChi*DiemHe4)/sum(kq.SoTinChi),2) is null THEN 0 \r\n" + 
					"							ELSE round(Sum(kq.SoTinChi*DiemHe4)/sum(kq.SoTinChi),2)\r\n" + 
					"							END) as GPA \r\n" + 
					"		from KetQuaHocTap as kq right join SinhVien as sv on sv.MaSinhVien=kq.MaSinhVien \r\n" + 
					"								left join NganhDaoTao as ndt on ndt.MaNganh=sv.MaNganhDaoTao\r\n" + 
					"								left join KyNang as kn on kn.MaCV=sv.MaSinhVien\r\n" + 
					"		group by MaNganh ,TenNganh,HoVaTen,sv.MaSinhVien,TenKyNang, NamDaoTao\r\n" + 
					"		) as a\r\n";
			if(!key.equals("")) {
				query+="where TenKyNang like ? ";
				
			}
			query+=") as a " ; 
			if(nam!=-1||loaiGPA!=-1||!maNganhDaoTao.equals("-1")) query+="where ";
			
			
			int dem=0;
			if(nam!=-1) {
				if(dem==0) query+="Nam=? ";
				else query+="and Nam=? ";
				dem++;
			}
			if(loaiGPA!=-1) {
				if(dem==0) query+="LoaiGPA=? ";
				else query+="and LoaiGPA=? ";
				dem++;
			}
			if(!maNganhDaoTao.equals("-1")) {
				if(dem==0) query+="MaNganh=? ";
				else query+="and MaNganh=? ";
				dem++;
			}
			query+="order by GPA desc";
			System.out.println(query);
			ArrayList<TimKiemSV> ds= new ArrayList<TimKiemSV>();
			try {
				conn = new DBConnect().getConnection();
				ps = conn.prepareStatement(query);
				dem=0;
				if(!key.equals("")) ps.setNString(++dem, "%"+key+"%");
				
				if(nam!=-1) ps.setInt(++dem, nam);
				if(loaiGPA!=-1) ps.setInt(++dem, loaiGPA);
				if(!maNganhDaoTao.equals("-1")) ps.setString(++dem, maNganhDaoTao);
				rs= ps.executeQuery();	
				while(rs.next()) {
					String maSinhVien=rs.getString("MaSinhVien");
					float GPA=rs.getFloat("GPA");
					String hoVaTen=rs.getNString("HoVaTen");
					String tenNganh=rs.getNString("TenNganh");
					ds.add(new TimKiemSV(maSinhVien, GPA, hoVaTen, tenNganh));
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
			finally {
				if(rs!=null) {
					rs.close();
				}
				if(ps!=null) {
					ps.close();
				}
				if(conn!=null) {
					conn.close();
				}	
			}
			return ds;
		}
}
